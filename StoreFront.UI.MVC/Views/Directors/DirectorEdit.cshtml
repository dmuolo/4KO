@model StoreFront.DATA.EF.Director

@using (Html.BeginForm("", "", FormMethod.Post, new { id = "DirectorEditForm" }))
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        @*<h4>Director</h4>
        <hr />*@
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.DirectorID)

        <div class="form-group">
            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

    <script>
    //This is a Partial view that is NOT embedded in the index view like the create was There is no call to the Html.Partial() like there is for create. It is part of the view and Partial view drops into that spot.
    //It's being launched into its own div and not into the partial
    //The structure for the create was embedded directly inside of the index
    //We're loading dynamically based on that click

    $('#DirectorEditForm').submit(function (e) {
        //works like the create - but we want to hand code it
        e.preventDefault();
        //serialize the form (packaging the form data for transport)
        var formData = $(this).serializeArray();
        $('#MessageContent').html("<div class='alert alert-info'>Please wait...</div>");

        $.ajax({
            url: "@Url.Action("AjaxEdit", "Directors")",
            type: "POST",
            data: formData,
            datatype: "json",
            success: function (data) {
                $('#MessageContent').html(
                    "<div class='alert alert-success'>Your record was updated!</div>");
                $('#DirectorEditForm')[0].reset();

                //create the html for the updated row
                $(function () {
                    var row = `<tr><td>${data.FirstName}</td><td>
                ${data.LastName}</td><td>Refresh to View Links</td></tr>`;
                    //update the row
                    $("#Director-" + data.DirectorID).replaceWith(row);
                });

                $('#DirectorEdit').dialog('close');
            },
            error: function (e) {
                $("#MessageContent").html("<div class='alert alert-warning'>There was an error." + " Please try again or contact the site administrator.</div>");
            }
        });
    });
    </script>
